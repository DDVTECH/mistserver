mistplayers.webrtc={name:"WebRTC player (WS)",mimes:["webrtc"],priority:MistUtil.object.keys(mistplayers).length+1,isMimeSupported:function(e){return this.mimes.indexOf(e)==-1?false:true},isBrowserSupported:function(e,n,t){if(!("WebSocket"in window)||(!("RTCPeerConnection"in window)||!("RTCRtpReceiver"in window))){return false}if(location.protocol.replace(/^http/,"ws")!=MistUtil.http.url.split(n.url.replace(/^http/,"ws")).protocol){t.log("HTTP/HTTPS mismatch for this source");return false}var o={};var i=false;for(var c in t.info.meta.tracks){if(t.info.meta.tracks[c].type=="meta"){if(t.info.meta.tracks[c].codec=="subtitle"){i=true}continue}if(!(t.info.meta.tracks[c].type in o)){o[t.info.meta.tracks[c].type]={}}o[t.info.meta.tracks[c].type][t.info.meta.tracks[c].codec]=1}var r=[];for(var s in o){var a=false;for(var l in o[s]){var h=RTCRtpReceiver.getCapabilities(s).codecs;for(var c in h){if(h[c].mimeType.toLowerCase()==(s+"/"+l).toLowerCase()){a=true;break}}}if(a){r.push(s)}}if(i){r.push("subtitle")}return r.length?r:false},player:function(){}};var p=mistplayers.webrtc.player;p.prototype=new MistPlayer;p.prototype.build=function(e,n){var t=this;var o=document.createElement("video");this.setSize=function(e){o.style.width=e.width+"px";o.style.height=e.height+"px"};function i(){var n=this;this.connection=false;this.connecting=false;this.control=false;let i=false;this.onmessage={};this.connect=function(){if(this.connecting){return this.connecting}if(this.connection.connectionState=="connected"){return new Promise(function(e,n){e()})}e.container.setAttribute("data-loading","");url=e.source.url;e.log("Connecting to "+url);this.control=new MistUtil.shared.ControlChannel(new WebSocket(url),e,this.onmessage);this.control.addListener("channel_timeout").then(function(){e.log("WebRTC: control channel timeout - try next combo","error");e.nextCombo("control channel timeout")});this.control.addListener("channel_error").then(function(){if(n.control.was_connected){e.log("Attempting to reconnect control channel");this.control=new MistUtil.shared.ControlChannel(new WebSocket(url),e,this.onmessage)}else{e.log("WebRTC: control channel error - try next combo","error");e.nextCombo("control channel error")}});Object.defineProperty(this.control,"debugging",{get:function(){return t.debugging}});this.step=0;if(this.connection)this.connection.close();this.connection=new RTCPeerConnection;this.connection.onconnectionstatechange=function(n){if(e.destroyed){return}switch(this.connectionState){case"failed":{if(!i){e.log("The WebRTC UDP connection failed, trying next combo.","error");e.nextCombo()}else{e.log("The WebRTC UDP connection was closed")}break}case"connected":case"disconnected":case"closed":case"new":case"connecting":default:{e.log("The WebRTC UDP connection state changed to "+this.connectionState);break}}};this.connection.oniceconnectionstatechange=function(n){if(e.destroyed){return}switch(this.iceConnectionState){case"failed":{e.showError("The WebRTC ICE connection "+this.iceConnectionState);break}case"disconnected":case"closed":case"new":case"checking":case"connected":case"completed":default:{e.log("The WebRTC ICE connection state changed to "+this.iceConnectionState);break}}};this.connection.addEventListener("signalingstatechange",function(){e.log("The WebRTC signaling state changed to "+this.signalingState)});this.connection.addTransceiver("audio",{direction:"recvonly"});this.connection.addTransceiver("video",{direction:"recvonly"});this.connection.ontrack=function(n){if(e.destroyed){return}if(t.debugging)console.log("Received media track",n.track);o.srcObject=n.streams[0]};this.meta=this.connection.createDataChannel("*",{protocol:"JSON"});var c,r;this.connecting=this.connection.createOffer({offerToReceiveVideo:true,offerToReceiveAudio:true}).then(function(e){n.step++;c=e;if(t.debugging)console.log("Offer:",MistUtil.format.offer2human(c.sdp),"State:",n.connection.connectionState);return n.connection.setLocalDescription(c)}).then(function(){n.step++;n.control.send({type:"offer_sdp",offer_sdp:c.sdp});return n.control.addListener("on_answer_sdp")}).then(function(e){n.step++;r=e.answer_sdp;if(t.debugging)console.log("Answer:",MistUtil.format.offer2human(r));return n.connection.setRemoteDescription({type:"answer",sdp:r})}).then(function(){n.step++;e.log("Connected to "+url);n.connecting=false;i=true;return r}).catch(function(t){n.connecting=false;e.showError("WebRTC connection failed: "+t)});return this.connecting};this.close=function(){return new Promise(function(t,o){if(!n.connection||n.connection.connectionState=="closed"){t()}n.connection.close();var i=function(){if(!n.connection||n.connection.connectionState=="closed"){t()}else{console.warn("not yet",n.connection.connectionState);e.timers.start(function(){i()},100)}};i()})};this.connect()}this.webrtc=new i;this.api=new MistUtil.shared.ControlChannelAPI(t.webrtc,e,o);n(o)};